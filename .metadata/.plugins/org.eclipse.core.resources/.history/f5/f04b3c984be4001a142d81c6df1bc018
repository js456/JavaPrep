package com.jitendrasaini.dynamicProgramming;

public class ZeroOneKnapsackProblem {

	public static int matrix[][];

	public static void initializeMatrix(int row, int column) {
		matrix = new int[row + 1][column + 1];
		for (int i = 0; i <= row; i++) {
			for (int j = 0; j <= column; j++) {
				if (i == 0 || j == 0)
					matrix[i][j] = 0;
				else
					matrix[i][j] = -1;
			}
		}
	}

	public static int maxProfit(int[] weightArr, int[] profit, int capacity, int n) {
		if (capacity == 0 || n == 0) {
			return 0;
		}

		if (matrix[n - 1][capacity] != -1)
			return matrix[n - 1][capacity];

		if (capacity >= weightArr[n - 1]) {
			// choice pick item not pick
			matrix[n - 1][capacity] = Integer.max(
					profit[n - 1] + maxProfit(weightArr, profit, capacity - weightArr[n - 1], n - 1),
					maxProfit(weightArr, profit, capacity, n - 1));
			return matrix[n - 1][capacity];
		} else {
			matrix[n - 1][capacity] = maxProfit(weightArr, profit, capacity, n - 1);
			return matrix[n - 1][capacity];
		}
	}

	public static boolean subsetSum(int[] weightArr, int sum, int n) {

		if (sum == 0)
			return true;
		if (sum >= 0 && n <= 0) {
			return false;
		}
		/*
		 * if(matrix[n-1][capacity]!=-1) return matrix[n-1][capacity];
		 */

		if (sum >= weightArr[n - 1]) {
			return subsetSum(weightArr, sum - weightArr[n - 1], n - 1) || subsetSum(weightArr, sum, n - 1);
		} else {
			return subsetSum(weightArr, sum, n - 1);
		}
	}

	public static int minimumSubsetDiff(int[] arr, int sum1, int sum2, int n) {
		if (n == 0) {
			return Math.abs(sum1 - sum2);
		}
		int x = minimumSubsetDiff(arr, sum1, sum2, n - 1);
		int y = minimumSubsetDiff(arr, sum1 - arr[n - 1], sum2 + arr[n - 1], n - 1);

		return Math.min(x, y);
	}

	public static void initializeMatrixMinSubset(int n, int sum) {
		matrix = new int[n][sum];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < sum; j++) {
				matrix[i][j] = -1;
			}
		}
	}

	public static int minimumSubsetDiffMemo(int[] arr, int sum1, int sum2, int n) {
		if (n == 0) {
			return Math.abs(sum1 - sum2);
		}
		if (matrix[n - 1][sum1] != -1)
			return matrix[n - 1][sum1];
		int x = minimumSubsetDiff(arr, sum1, sum2, n - 1);
		int y = minimumSubsetDiff(arr, sum1 - arr[n - 1], sum2 + arr[n - 1], n - 1);
		matrix[n - 1][sum1] = Math.min(x, y);
		return Math.min(x, y);
	}

	public static int bottomUpMinSubsetDiff(int[] arr, int sum1) {
		boolean dp[][] = new boolean[arr.length + 1][sum1 / 2 + 1];
		for (int i = 0; i <= arr.length; i++) {
			for (int j = 0; j < sum1 / 2 + 1; j++) {
				if (j == 0) {
					dp[i][j] = true;
					continue;
				}
				if (i == 0) {
					dp[i][j] = false;
					continue;
				}

				if (j >= arr[i - 1]) {
					dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
				} else {
					dp[i][j] = dp[i - 1][j];
				}
			}
		}
		for (int j = sum1 / 2; j >= 0; j--) {
			if (dp[arr.length][j])
				return Math.abs(sum1 - 2 * j);
		}
		return -1;

	}

	private static int knapsackRecursiveUnbounded(int[] profits, int[] weights, int capacity) {
		if (weights.length != profits.length)
			return 0;

		Integer[][] dp1 = new Integer[profits.length + 1][capacity + 1];
		for (int i = 0; i < dp1.length; i++) {
			for (int j = 0; j <= capacity; j++) {
				if (j <= 0 || i <= 0) {
					dp1[i][j] = 0;
					continue;
				}
			}
		}
		for (int i = 1; i < dp1.length; i++) {
			for (int j = 1; j <= capacity; j++) {
				if (weights[i - 1] <= j) {
					dp1[i][j] = Math.max(profits[i - 1] + dp1[i][j - weights[i - 1]], dp1[i - 1][j]);
				} else {
					dp1[i][j] = dp1[i - 1][j];
				}

			}
		}

		return dp1[profits.length][capacity];
	}
	
	private static int knapsackRecursiveUnboundedCoinChange(int[] profits, int[] weights, int capacity) {
		if (weights.length != profits.length)
			return 0;

		Integer[][] dp1 = new Integer[profits.length + 1][capacity + 1];
		for (int i = 0; i < dp1.length; i++) {
			for (int j = 0; j <= capacity; j++) {
				if (j <= 0 || i <= 0) {
					dp1[i][j] = 0;
					continue;
				}
			}
		}
		for (int i = 1; i < dp1.length; i++) {
			for (int j = 1; j <= capacity; j++) {
				if (weights[i - 1] <= j) {
					dp1[i][j] = Math.max(1 + dp1[i][j - weights[i - 1]], dp1[i - 1][j]);
				} else {
					dp1[i][j] = dp1[i - 1][j];
				}

			}
		}

		return dp1[profits.length][capacity];
	}

	public static void maxProfitTopDown(int[] weightArr, int[] profit, int capacity, int n) {
		if (capacity == 0 || n == 0) {
			return;
		}
		for (int i = 1; i < profit.length + 1; i++) {
			for (int j = 1; j < capacity + 1; j++) {
				if (weightArr[i - 1] <= j) {
					matrix[i][j] = Integer.max(profit[i - 1] + matrix[i - 1][j - weightArr[i - 1]], matrix[i - 1][j]);
				} else {
					matrix[i][j] = matrix[i - 1][j];
				}
			}
		}

	}

	//coin change
	public static int coinChange(int[] arr, int sum, int n) {
		if (sum == 0) {
			return 1;
		}
		if(n==0)
			return 0;
		if(arr[n-1]<=sum) {
			//System.out.println("index :"+(n)+" sum :"+sum);
			int count = (coinChange(arr, sum-arr[n-1], n)) +coinChange(arr, sum, n - 1);
			//System.out.println("ways "+ count);
			return count;
		}else {
			return coinChange(arr, sum, n - 1);
		}
	}
	
	//coin change
	public static int maxGroup(int[] arr, int sum, int n) {
		if (sum == 0) {
			return 1;
		}
		if(n==0)
			return 0;
		if(arr[n-1]<=sum) {
			//System.out.println("index :"+(n)+" sum :"+sum);
			int count = (coinChange(arr, sum-arr[n-1], n)) +coinChange(arr, sum, n - 1);
			//System.out.println("ways "+ count);
			return count;
		}else {
			return coinChange(arr, sum, n - 1);
		}
	}
	
	
	private static int coinChangeUnboundedBottum(int[] coins, int sum) {

		Integer[][] dp1 = new Integer[coins.length + 1][sum + 1];
		/*
		 * for (int i = 0; i < dp1.length; i++) { for (int j = 0; j < 1; j++) { if (j ==
		 * 0) { dp1[i][j] = 1; continue; }
		 * 
		 * } }
		 */
		for (int i = 0; i < dp1.length; i++) {
			for (int j = 0; j <= sum; j++) {
				if(j == 0) {
					dp1[i][j] = 1;
					continue;
				}
				if(i ==0 ) {
					dp1[i][j] = 0;
					continue;
				}
				if (coins[i - 1] <= j) {
					dp1[i][j] = dp1[i][j - coins[i - 1]]+dp1[i - 1][j];
				} else {
					dp1[i][j] = dp1[i - 1][j];
				}

			}
		}

		return dp1[coins.length][sum];
	}
	public static void main(String[] args) {
		int[] weightArr = { 1,2, 3, 4, 5 };
		int[] profit = {2, 6, 7, 10, 13};
		int capacity = 5;
		// int sum =0;
		// System.out.println(subsetSum(weightArr, sum, weightArr.length));
		/*
		 * initializeMatrix(profit.length, capacity); maxProfitTopDown(weightArr,
		 * profit, capacity, weightArr.length);
		 * System.out.println(matrix[profit.length][capacity]);
		 */
		/*
		 * int[] minSubSum = {1, 2, 7, 1, 5}; int totalSum = 0; for (int sum :
		 * minSubSum) { totalSum += sum; }
		 */
		// initializeMatrixMinSubset(minSubSum.length, totalSum);
		// System.out.println(minimumSubsetDiff(minSubSum, totalSum, 0,
		// minSubSum.length));
		// System.out.println(bottomUpMinSubsetDiff(minSubSum, totalSum));

		
		int coin[] = {1,2,3,4,5,6,7,8};
		/*
		 * 1 1 1 1 1 1 1 1 1 1 2 1 1 1 3 1 2 3 3 3 2 2 2 2 2 1 1
		 */
		
		int sum =4;
		System.out.println(coinChange(coin,sum, coin.length));
		System.out.println(coinChangeUnboundedBottum(coin,sum));

	}
}
