package com.jitendrasaini.dynamicProgramming;

public class ZeroOneKnapsackProblem {

	public static int matrix[][];
	public static void initializeMatrix(int row, int column) {
		matrix = new int[row][column];
		for(int i =0;i<row;i++) {
			for(int j =0;j<column;j++) {
				if(i ==0||j==0)
					matrix[i][j]=0;
				else
					matrix[i][j]=-1;
			}
		}
	}
	public static int maxProfit(int []weightArr,int []profit, int capacity, int n ) {
		if(capacity ==0 || n ==0 ) {
			return 0;
		}
		if(capacity>=weightArr[n-1]) {
			return Integer.max(profit[n-1]+maxProfit(weightArr, profit, capacity-weightArr[n-1], n-1), maxProfit(weightArr, profit, capacity, n-1));
		}else {
			return maxProfit(weightArr, profit, capacity, n-1);
		}
	}
	public static void main(String[] args) {
		int []weightArr = {2, 3, 1, 4 };
		int []profit = { 4, 5, 3, 7 };
		int capacity = 5;
		System.out.println(maxProfit(weightArr, profit, capacity, weightArr.length));
	}
}
